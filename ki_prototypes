Einfacher Algorithmus
laufe rechts bei wand
laufe links/rechts wenn futter nebenan
nehme futter auf wenn man drauf steht
////////////////////////////////


nearcheck();

    if (done)
    {
        cout<<"antarray"<<endl;
        for (int a = 0; a < 3; a++)
        {
            cout<<antworldarray[0][a]<<antworldarray[1][a]<<antworldarray[2][a]<<endl;
        }
       //cout<<"pointer xpos: "<<anthillpointer->xposition<<endl;
    }
    if(antworldarray[1][1] ==2)
    {
        takeFood();
    }

    switch (status)
    {
        case 1:
                if (antworldarray[1][0]==1) //front is block
                {
                    status = 3;
                }
                if (antworldarray[2][1]==2) //right is food
                {
                    status = 3;
                }
                if (antworldarray[0][1]==2) //left is food
                {
                    status = 4;
                }
                done = antmove(1);
                break;

        case 2:
                if (antworldarray[1][2]==1) //front is block
                {
                    status = 4;
                }
                if (antworldarray[0][1]==2) //right is food
                {
                    status = 4;
                }
                if (antworldarray[2][1]==2) //left is food
                {
                    status = 3;
                }
                done = antmove(2);
                break;

        case 3:
                if (antworldarray[2][1]==1) //front is block
                {
                    status = 2;
                }
                if (antworldarray[1][2]==2) //right is food
                {
                    status = 2;
                }
                if (antworldarray[1][0]==2) //left is food
                {
                    status = 1;
                }
                done = antmove(3);
                break;

        case 4:
                if (antworldarray[0][1]==1) //front is block
                {
                    status = 1;
                }
                if (antworldarray[1][0]==2) //right is food
                {
                    status = 1;
                }
                if (antworldarray[1][2]==2) //left is food
                {
                    status = 2;
                }
                done = antmove(4);
                break;

        default:
                    status = 1;
                    break;
    }



//simple wayfinding

    nearcheck();

    if (done)
    {
        cout<<"lastmove: "<<lastmove<<endl;
            if(i<5) status = 1;
            else if(i<10) status = 3;
            else if(i<15) status = 1;
            else //find way back
            {
                if(*xhillorigin==xAntPosition && *zhillorigin==zAntPosition)
                {
                    i = 0;
                    status = 1;
                }
                if(*xhillorigin<xAntPosition)    //hill is south
                {
                    if (antworldarray[1][2]==1) //south is block
                    {
                        if(*zhillorigin<zAntPosition)
                        {
                            status = 4;
                        }
                        else
                        {
                            status = 3;
                        }
                    }
                    else
                    if(lastmove != 1)
                    {
                        cout<<"lastmove != 1"<<lastmove<<endl;
                        status = 2;
                    }
                }
                if(*xhillorigin>xAntPosition)    //hill is north
                {
                    if (antworldarray[1][0]==1) //north is block
                    {
                        if(*zhillorigin<zAntPosition)
                        {
                            status = 4;
                        }
                        else
                        {
                            status = 3;
                        }
                    }
                    else
                    if(lastmove != 2)
                    {
                        cout<<"lastmove != 2"<<lastmove<<endl;
                        status = 1;
                    }
                }
                if(*zhillorigin<zAntPosition)    //hill is west
                {
                    if (antworldarray[0][1]==1) //west is block
                    {
                        if(*xhillorigin<xAntPosition)
                        {
                            status = 2;
                        }
                        else
                        {
                            status = 1;
                        }
                    }
                    else
                    if(lastmove != 3)
                    {
                        cout<<"lastmove != 3"<<lastmove<<endl;
                        status = 4;
                    }

                }
                if(*zhillorigin>zAntPosition)    //hill is east
                {
                    if (antworldarray[2][1]==1) //east is block
                    {
                        if(*xhillorigin<xAntPosition)
                        {
                            status = 2;
                        }
                        else
                        {
                            status = 1;
                        }
                    }
                    else
                    if(lastmove != 4)
                    {
                        cout<<"lastmove != 4"<<lastmove<<endl;
                        status = 3;
                    }
                }
            }
            lastmove = status;
            cout<<"newmove: "<<lastmove<<endl;

        if(i<15)i++;

    }


    switch (status)
    {
        case 1:
                done = antmove(1);
                break;

        case 2:
                done = antmove(2);
                break;

        case 3:
                done = antmove(3);
                break;

        case 4:
                done = antmove(4);
                break;

        default:
                    status = 1;
                    break;
    }

//walks lines to find food, if found brings it back to hill

    nearcheck();

        if (done)
        {
            if(!foodfound)
            {
                if(i>=0 && i<=1)
                    status = 1;
                else if(i>1 && i<6)
                    status = 4;
                else if(i>=6 && i<=8)
                    status = 1;
                else if(i>8 && i<18)
                    status = 3;
                else if(i>=18 && i<=20)
                    status = 1;
                else if(i>20 && i<30)
                    status = 4;
                else if(i==25)
                    status = 1;
                else if(i>25 && i<35)
                    status = 3;
                else if(i==35)
                    status = 1;
                else if(i>35 && i<45)
                    status = 4;

                if (antWorldVec[floor(antViewRows/2)-1][floor(antViewColumns/2)].food > 0) //north is block
                {
                    cout<<"north"<<endl;
                    status = 1;
                }
                if (antWorldVec[floor(antViewRows/2)+1][floor(antViewColumns/2)].food > 0) //south is block
                {
                    cout<<"south"<<endl;
                    status = 2;
                }
                if (antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)-1].food > 0) //west is block
                {
                    cout<<"west"<<endl;
                    status = 4;
                }
                if (antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)+1].food > 0) //east is block
                {
                    cout<<"east"<<endl;
                    status = 3;
                }

            }

                if(antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)].food > 0)
                {
                    takeFood();
                    foodfound = 1;
                }

                if(foodfound)
                {
                    if(*xhillorigin==xAntPosition && *zhillorigin==zAntPosition)
                    {
                        i = 0;
                        status = 1;
                        if(bringFood())
                            cout<<"food zurÃ¼ckgebracht"<<endl;
                        foodfound = 0;
                    }
                    if(*xhillorigin<xAntPosition)    //hill is south
                    {
                        if (antworldarray[1][2]==1) //south is block
                        {
                            if(*zhillorigin<zAntPosition)
                            {
                                status = 4;
                            }
                            else
                            {
                                status = 3;
                            }
                        }
                        else
                        if(lastmove != 1)
                        {
                            status = 2;
                        }
                    }
                    if(*xhillorigin>xAntPosition)    //hill is north
                    {
                        if (antworldarray[1][0]==1) //north is block
                        {
                            if(*zhillorigin<zAntPosition)
                            {
                                status = 4;
                            }
                            else
                            {
                                status = 3;
                            }
                        }
                        else
                        if(lastmove != 2)
                        {
                            status = 1;
                        }
                    }
                    if(*zhillorigin<zAntPosition)    //hill is west
                    {
                        if (antworldarray[0][1]==1) //west is block
                        {
                            if(*xhillorigin<xAntPosition)
                            {
                                status = 2;
                            }
                            else
                            {
                                status = 1;
                            }
                        }
                        else
                        if(lastmove != 3)
                        {
                            status = 4;
                        }

                    }
                    if(*zhillorigin>zAntPosition)    //hill is east
                    {
                        if (antworldarray[2][1]==1) //east is block
                        {
                            if(*xhillorigin<xAntPosition)
                            {
                                status = 2;
                            }
                            else
                            {
                                status = 1;
                            }
                        }
                        else
                        if(lastmove != 4)
                        {
                            status = 3;
                        }
                    }
                }
                lastmove = status;

            if(i<29)i++;
            else i = 6;

        }


        switch (status)
        {
            case 1:
                    done = antmove(1);
                    break;

            case 2:
                    done = antmove(2);
                    break;

            case 3:
                    done = antmove(3);
                    break;

            case 4:
                    done = antmove(4);
                    break;

            default:
                        status = 1;
                        break;
        }

//more complex KI
//walks in random direction until distance is too big or food is found
//if food is found the ant brings it back

nearcheck();

        if (done)
        {

            cout<<"startdirection: "<<startdirection<<endl;
            if(sqrt(pow(abs(*xhillorigin-xAntPosition),2) + pow(abs(*zhillorigin-zAntPosition),2)) >= 13)
            {
                foodfound = 1; //too far away, go back
            }

            if(!foodfound)
            {
                switch(startdirection)
                {
                    case 1:
                            if(i>=0 && i<=1)
                                status = 1;
                            else if(i>1 && i<6)
                                status = 4;
                            else if(i>=6 && i<=8)
                                status = 1;
                            else if(i>8 && i<18)
                                status = 3;
                            else if(i>=18 && i<=20)
                                status = 1;
                            else if(i>20 && i<30)
                                status = 4;
                            break;
                    case 2:
                            if(i>=0 && i<=1)
                                status = 2;
                            else if(i>1 && i<6)
                                status = 4;
                            else if(i>=6 && i<=8)
                                status = 2;
                            else if(i>8 && i<18)
                                status = 3;
                            else if(i>=18 && i<=20)
                                status = 2;
                            else if(i>20 && i<30)
                                status = 4;
                            break;
                    case 3:
                            if(i>=0 && i<=1)
                                status = 3;
                            else if(i>1 && i<6)
                                status = 2;
                            else if(i>=6 && i<=8)
                                status = 3;
                            else if(i>8 && i<18)
                                status = 1;
                            else if(i>=18 && i<=20)
                                status = 3;
                            else if(i>20 && i<30)
                                status = 2;
                            break;
                    case 4:
                            if(i>=0 && i<=1)
                                status = 4;
                            else if(i>1 && i<6)
                                status = 1;
                            else if(i>=6 && i<=8)
                                status = 4;
                            else if(i>8 && i<18)
                                status = 2;
                            else if(i>=18 && i<=20)
                                status = 4;
                            else if(i>20 && i<30)
                                status = 1;
                            break;
                }



                if (antWorldVec[floor(antViewRows/2)-1][floor(antViewColumns/2)].food > 0) //north is block
                {
                    cout<<"north"<<endl;
                    status = 1;
                }
                if (antWorldVec[floor(antViewRows/2)+1][floor(antViewColumns/2)].food > 0) //south is block
                {
                    cout<<"south"<<endl;
                    status = 2;
                }
                if (antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)-1].food > 0) //west is block
                {
                    cout<<"west"<<endl;
                    status = 4;
                }
                if (antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)+1].food > 0) //east is block
                {
                    cout<<"east"<<endl;
                    status = 3;
                }

            }


                if(antWorldVec[floor(antViewRows/2)][floor(antViewColumns/2)].food > 0)
                {
                    takeFood();
                    foodfound = 1;
                }

                if(foodfound)
                {
                    if(*xhillorigin==xAntPosition && *zhillorigin==zAntPosition)
                    {
                        i = 0;
                        status = 1;
                        if(bringFood())
                            cout<<"food zurÃ¼ckgebracht"<<endl;
                        foodfound = 0;
                    }
                    if(*xhillorigin<xAntPosition)    //hill is south
                    {
                        if (antworldarray[1][2]==1) //south is block
                        {
                            if(*zhillorigin<zAntPosition)
                            {
                                status = 4;
                            }
                            else
                            {
                                status = 3;
                            }
                        }
                        else
                        if(lastmove != 1)
                        {
                            status = 2;
                        }
                    }
                    if(*xhillorigin>xAntPosition)    //hill is north
                    {
                        if (antworldarray[1][0]==1) //north is block
                        {
                            if(*zhillorigin<zAntPosition)
                            {
                                status = 4;
                            }
                            else
                            {
                                status = 3;
                            }
                        }
                        else
                        if(lastmove != 2)
                        {
                            status = 1;
                        }
                    }
                    if(*zhillorigin<zAntPosition)    //hill is west
                    {
                        if (antworldarray[0][1]==1) //west is block
                        {
                            if(*xhillorigin<xAntPosition)
                            {
                                status = 2;
                            }
                            else
                            {
                                status = 1;
                            }
                        }
                        else
                        if(lastmove != 3)
                        {
                            status = 4;
                        }

                    }
                    if(*zhillorigin>zAntPosition)    //hill is east
                    {
                        if (antworldarray[2][1]==1) //east is block
                        {
                            if(*xhillorigin<xAntPosition)
                            {
                                status = 2;
                            }
                            else
                            {
                                status = 1;
                            }
                        }
                        else
                        if(lastmove != 4)
                        {
                            status = 3;
                        }
                    }
                }
                lastmove = status;

            if(i<29)i++;
            else i = 6;

        }


        switch (status)
        {
            case 1:
                    done = antmove(1);
                    break;

            case 2:
                    done = antmove(2);
                    break;

            case 3:
                    done = antmove(3);
                    break;

            case 4:
                    done = antmove(4);
                    break;

            default:
                        status = 1;
                        break;
        }


///A* Prototype

 nearcheck();

    if (done)
    {
        /*if(sqrt(pow(abs(*xhillorigin-xAntPosition),2) + pow(abs(*zhillorigin-zAntPosition),2)) >= 13)
        {
            foodfound = 1; //too far away, go back
        }*/

        if(!foodfound)
        {
            switch(startdirection)
            {
                case 1:
                        if(waytick>=0 && waytick<=1)
                            status = 0;
                        else if(waytick>1 && waytick<6)
                            status = 1;
                        else if(waytick>=6 && waytick<=8)
                            status = 0;
                        else if(waytick>8 && waytick<18)
                            status = 3;
                        else if(waytick>=18 && waytick<=20)
                            status = 0;
                        else if(waytick>20 && waytick<30)
                            status = 1;
                        break;
                case 2:
                        if(waytick>=0 && waytick<=1)
                            status = 2;
                        else if(waytick>1 && waytick<6)
                            status = 3;
                        else if(waytick>=6 && waytick<=8)
                            status = 2;
                        else if(waytick>8 && waytick<18)
                            status = 1;
                        else if(waytick>=18 && waytick<=20)
                            status = 2;
                        else if(waytick>20 && waytick<30)
                            status = 3;
                        break;
                case 3:
                        if(waytick>=0 && waytick<=1)
                            status = 0;
                        else if(waytick>1 && waytick<6)
                            status = 2;
                        else if(waytick>=6 && waytick<=8)
                            status = 3;
                        else if(waytick>8 && waytick<18)
                            status = 0;
                        else if(waytick>=18 && waytick<=20)
                            status = 1;
                        else if(waytick>20 && waytick<30)
                            status = 2;
                        break;
                case 4:
                        if(waytick>=0 && waytick<=1)
                            status = 3;
                        else if(waytick>1 && waytick<6)
                            status = 0;
                        else if(waytick>=6 && waytick<=8)
                            status = 3;
                        else if(waytick>8 && waytick<18)
                            status = 2;
                        else if(waytick>=18 && waytick<=20)
                            status = 3;
                        else if(waytick>20 && waytick<30)
                            status = 0;
                        break;
            }

            if (antViewVec[floor(antViewRows/2)-1][floor(antViewColumns/2)].food > 0) //north is block
            {
                cout<<"food found"<<endl;
                status = 0;
            }
            if (antViewVec[floor(antViewRows/2)+1][floor(antViewColumns/2)].food > 0) //south is block
            {
                cout<<"food found"<<endl;
                status = 2;
            }
            if (antViewVec[floor(antViewRows/2)][floor(antViewColumns/2)-1].food > 0) //west is block
            {
                cout<<"food found"<<endl;
                status = 3;
            }
            if (antViewVec[floor(antViewRows/2)][floor(antViewColumns/2)+1].food > 0) //east is block
            {
                cout<<"food found"<<endl;
                status = 1;
            }

        }

            if(antViewVec[floor(antViewRows/2)][floor(antViewColumns/2)].food > 0)
            {
                takeFood();
                foodfound = 1;
            }

            if(foodfound)
            {

                if (!followingPath)
                {
                    pathfinder->updateMap(this);
                    path = pathfinder->calculatePath(xAntPosition,zAntPosition,*xhillorigin,*zhillorigin);
                    cout << "weg: " << path << endl;
                    followingPath = true;
                }

                if(followingPath)
                {
                    /*cout<<"weg alt: "<<path<<endl;
                    static size_t i;
                    if (i < path.length())
                    {
                        size_t direction =  path.at(i) - '0';
                        if (direction <= 3)
                        {
                            status = direction;
                            i++;
                        }
                        //status = 99;
                    }
                    else
                        i=0;*/


                    pathfinder->updateMap(this);
                    path = pathfinder->calculatePath(xAntPosition,zAntPosition,*xhillorigin,*zhillorigin);
                    cout << "weg neu: " << path << endl;
                    static size_t i;
                    if ( path.length())
                    {
                        size_t direction =  path.at(0) - '0';
                        if (direction <= 3)
                        {
                            status = direction;
                            i++;
                        }
                        //status = 99;
                    }
                    else
                        i=0;



                }


                if(*xhillorigin==xAntPosition && *zhillorigin==zAntPosition)
                {

                    status = 99;
                    if(bringFood())
                        cout<<"food zurÃ¼ckgebracht"<<endl;
                    foodfound = 0;
                    followingPath = false;
                    waytick = 1;
                }
                /*
                if(*xhillorigin<xAntPosition)    //hill is south
                {
                    if (antViewVec.at(1).at(2).block == 1) //south is block
                    {
                        if(*zhillorigin<zAntPosition)
                        {
                            status = 4;
                        }
                        else
                        {
                            status = 3;
                        }
                    }
                    else
                    if(lastmove != 1)
                    {
                        status = 2;
                    }
                }
                if(*xhillorigin>xAntPosition)    //hill is north
                {
                    if (antViewVec.at(1).at(0).block == 1) //north is block
                    {
                        if(*zhillorigin<zAntPosition)
                        {
                            status = 4;
                        }
                        else
                        {
                            status = 3;
                        }
                    }
                    else
                    if(lastmove != 2)
                    {
                        status = 1;
                    }
                }
                if(*zhillorigin<zAntPosition)    //hill is west
                {
                    if (antViewVec.at(0).at(1).block == 1) //west is block
                    {
                        if(*xhillorigin<xAntPosition)
                        {
                            status = 2;
                        }
                        else
                        {
                            status = 1;
                        }
                    }
                    else
                    if(lastmove != 3)
                    {
                        status = 4;
                    }

                }
                if(*zhillorigin>zAntPosition)    //hill is east
                {
                    if (antViewVec.at(2).at(1).block == 1) //east is block
                    {
                        if(*xhillorigin<xAntPosition)
                        {
                            status = 2;
                        }
                        else
                        {
                            status = 1;
                        }
                    }
                    else
                    if(lastmove != 4)
                    {
                        status = 3;
                    }
                }
                */
            }
            lastmove = status;
                if(!foodfound)
                {
                    if(waytick<29)waytick++;
                    else waytick = 6;
                }

                done= 0;
    }

    switch (status)
    {
        case 0:
                done = antmove(0);
                break;

        case 1:
                done = antmove(1);
                break;

        case 2:
                done = antmove(2);
                break;

        case 3:
                done = antmove(3);
                break;

        default:
                    status = 0;
                    break;
    }

